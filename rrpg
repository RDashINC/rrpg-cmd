#!/bin/bash
#
# AUTHOR: RAINBOWDASHDC (@RAINBOWDASHDC) / aka (@2root4you)
# COPYRIGHT: RDASHINC http://rdashinc.github.io/ (GNUGPLV3)
# DESC: RPG GAME FOR LINUX, MLP.
# NOTE: I use alot of NOTEs because they're highlighted on KATE c:
# NOTE: My Little Pony: Frienship is Magic(R) is a TRADEMARK of Hasbro (INC). Used without permission.
# NOTE: Menus moved to content/loaded/init/menus.bash

### Why Don't I ever document shit? -- Oh hey, I do.

## For Updater Module.
## VER=1.4.2.1.6.4A ## VERSION-SEARCH

## INFORMATION
export ver="1.4.3.2-ext"
export date="24/5/14-BTF" ## DATE-SEARCH
export os_name=$(expr substr $(uname -s) 1 6)
export h=30
export w=100

echo -ne "\033[8;${h};${w}t"

if [ "$1" == "--force-linux" ]; then
	export os_name=""
fi

if [ "$os_name" == "CYGWIN" ]; then
	echo "Using Cygwin, windows operating system."
	export os="win32"
	export basedir=$(get_basedir.cmd)
else
	echo "Using a linux flavor or etc."
	export os="Linux"
	export basedir=$(source get_basedir)
fi

echo "Using: $basedir"
export ENGINE_DIR=$basedir/engine
export CONFIG_DIR=$basedir/config
export MOD_DIR=$basedir/mod
echo "Engine: ${ENGINE_DIR}"
echo "Config: ${CONFIG_DIR}"
echo "Mods: ${MOD_DIR}"

## CHECK DIRECTORYS.
if [ ! -e "$basedir/tmp" ]; then
	mkdir $basedir/tmp
fi
if [ ! -e "$basedir/home" ]; then
	mkdir $basedir/home
fi
if [ ! -e "$basedir/config" ]; then
	mkdir $basedir/config
fi
if [ ! -e "$basedir/db" ]; then
	mkdir $basedir/db
fi
if [ ! -e "$basedir/mod" ]; then
	echo "ERR: No Modules. This will not work."
	exit 1
fi

## CHECK ANSI
if [ ! -e "$basedir/config/ansi.txt" ]; then
	echo "on" > "$basedir/config/ansi.txt"
fi

# FUNCTIONS

function rrpg_help {
	export ver
	export date
	echo "RDC - RRPG [$ver|$date]"
	echo ""
	echo "DESC: My Little Pony Friendship is Magic(R): based RPG game."
	echo "USAGE: rrpg [SWITCH]"
	echo "       rrpg [OPTION]"
	echo ""
	echo "NOTE: Help Doesn't support ANSI for compatibility reasons."
	echo ""
	echo "General:"
	echo "	--help               Shows this help page."
	echo "	--version            Display Version."
	echo "	--ansi=[on/off]      Load w/ or w/o ANSI colors."
	echo "	--man                Opens an interactive manual"
	echo "	--content            Specify Content Pack to use. Basedir is content."
	echo ""
	echo "More Command-Line Control Coming Soon!"
	echo ""
	echo "Email and bug reports/suggestions to <allardj64@gmail.com>"
	exit
}

function get_args {
	# Here's where ALLLL THE MUTHFUCKING COMMANDLINE ARGUMENTS ARE HANDLED. THAT'S RIGHT. ALL OF THEM.
	for arg in $@
	do
		if [ "$use_custom_content" == "true" ]; then
			# needs to be ported
			cecho "CAUTION: \c" red && cecho "Content Packs can be HARMFUL if reverse enginered." cyan
			cecho "DO NOT trust outside sources without looking at them. I am" cyan
			cecho "not responsible for any damage done by a content pack." cyan
			read -p "Press any key to continue."

			if [ "$arg" == "" ]; then
				echo "ERR: No Content Pack Specified."
				return 1
			fi
			if [ -e "$basedir/content/$arg" ]; then
				echo "ERR: Doesn't exist. [$basedir/content/$arg]"
				return 1
			fi

			local use_custom_content="false"
			export cp_cust="$arg"
		fi

		local arg2=$(echo $arg | awk -F "=" '{ print $2 }')
		if [ "$arg" == "--help" ]; then
			rrpg_help
		elif [ "$arg" == "--version" ]; then
			echo $ver
			exit
		fi

		# ANSI.
		if [ "$arg" == "--ansi=off" ]; then
			echo "off" > $basedir/config/ansi.txt
			echo "ANSI turned: off."
		elif [ "$arg" == "--ansi=on" ]; then
			echo "on" > $basedir/config/ansi.txt
			echo "ANSI turned: on."
		fi

		# Interactive Manual.
		if [ "$arg" == "--man" ]; then
			source ${ENGINE_DIR}/rrpg_man.bash
			exit
		fi

		if [ "$arg2" == "--content" ]; then
			local use_custom_content="true"
		fi
	done
}

function init {
	## Load Modules JIT.
	## LOAD MODS TO ENABLE ANSI ECHO SUPPORT AND OTHER THINGS
	source ${ENGINE_DIR}/rrpg_modloader.bash --verbose
	clear

	if [ ! -e "$basedir/config/ansi.txt" ]; then
		echo "on" > $basedir/config/ansi.txt
	fi

	if [ ! -e "$basedir/config/text_speed.txt" ]; then
		echo "0.5" > $basedir/config/text_speed.txt
	fi

	if [ ! -e "$basedir/config/content.txt" ]; then
		echo "default.zip" > $basedir/config/content.txt
	fi

	## Pass Arguments to arguments function.
	get_args $*
	
	## Load Content Pack.
	depends mod_cp
	if [ "$cp_cust" == "" ]; then
		load_cp "$(cat $basedir/config/content.txt)" || error_exit "ERR: Content Pack failed too load. [default] (This isn't normal.)"
	else
		load_cp "$cp_cust" || error_exit "ERR: Content Pack failed too load. [$cp_cust]"
	fi

	# Load menus
	source "$basedir/content/loaded/init/menus.bash"
	clear
	
	## "Splash"
	if [ -e "$basedir/content/loaded/init/splash.bash" ]; then
		source "$basedir/content/loaded/init/splash.bash"
		read -t 3 1>/dev/null 2>/dev/null
	fi
	
	## Location to go to after "splash".
	menu
}

function menu {
	clear
	rrpg_main
	cecho "Version: $ver - $date" green
	echo ""
	if [ ! -e "$basedir/db/rrpg_main.rdb" ]; then 
		cecho "1. New Game" green
		cecho "2. Continue Game" red
	else
		cecho "1. New Game" red
		cecho "2. Continue Game" green
	fi
	cecho "3. Settings" cyan
	cecho "4. Debug" red
	cecho "5. RDashInc" cyan
	if [ -e "$basedir/content/loaded/info/info" ]; then
		cecho "6. Content Pack Information." green
	else
		cecho "6. Content Pack Information." red
	fi
	cecho "7. Exit" red
	echo ""
	cecho "Selection: \c" cyan
	read menu_choice

	# Check Input, and go to selection.
	if [ ! "$menu_choice" == "" ]; then
		if [ "$menu_choice" == "1" ]; then
			new_game
		elif [ "$menu_choice" == "2" ]; then
			continue_game
		elif [ "$menu_choice" == "3" ]; then
			settings_menu
		elif [ "$menu_choice" == "4" ]; then
			debug_menu
		elif [ "$menu_choice" == "5" ]; then
			exo-open --launch Webbrowser http://rdashinc.tk/ 1>/dev/null 2>/dev/null
			read -p "Press any key to continue."
		elif [ "$menu_choice" == "6" ]; then
			content_pack_menu
		elif [ "$menu_choice" == "7" ]; then
			rm -rf $basedir/content/loaded
			rm -rf $basedir/db/*.txt
			rm -rf $basedir/tmp/*
			exit
		fi
		menu
	else
		menu
	fi
}

# Initiate Game (Uses all Functions! :D)
init "$*"
